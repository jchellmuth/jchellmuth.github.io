knitr::opts_knit$set(base.dir = "/Users/jch/web/jchellmuth.github.io/", base.url = "/")
knitr::opts_chunk$set(fig.path = "images/",warning=FALSE)
library(flowCore)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("flowCore")
library(flowCore)
library(ggcyto)
BiocManager::install("ggcyto")
library(ggcyto)
if (!require("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("ggcyto")
library(ggcyto)
BiocManager::install("ggcyto")
library(ggcyto)
BiocManager::install("ggcyto",version = "3.12")
library(nlme)
install.packages("nlme")
install.packages("nlme")
BiocManager::install("ggcyto")
knitr::opts_knit$set(base.dir = "/Users/jch/web/jchellmuth.github.io/", base.url = "/")
knitr::opts_chunk$set(fig.path = "images/",warning=FALSE)
library(ggcyto)
library(flowCore)
library(ggcyto)
library(tidyverse)
fs <- read.flowSet(path = "../../downloads/2020-07-08-FACS-data//",pattern = ".fcs",alter.names = T)
pData(fs) %>% head(3)
pData(fs)
pData(fs) %>% head()
pData(fs) %>% head(3)
pData(fs)$well <- gsub(".*_.*_(.*)_.*.fcs","\\1",sampleNames(fs)) # extract well from name and add new 'well' column
pData(fs) %>% head(3)
colnames(fs)
colnames(fs)[colnames(fs)=="FITC.A"] <- "GFP"
colnames(fs)[colnames(fs)=="Pacific.Blue.A"] <- "BFP"
gs <- GatingSet(fs)
g.singlets <- polygonGate(filterId = "Singlets","FSC.A"=c(2e4,25e4,25e4,2e4),"FSC.H"=c(0e4,12e4,18e4,6e4)) # define gate
add(gs,g.singlets) # add gate to GatingSet
recompute(gs) # recompute GatingSet
ggcyto(gs[[1]],aes(x=FSC.A,y=SSC.A),subset="root")+geom_hex(bins = 200)+ggcyto_par_set(limits = "instrument")
g.live <- polygonGate(filterId = "Live","FSC.A"=c(5e4,24e4,24e4,8e4),"SSC.A"=c(0,2e4,15e4,5e4)) # define gate
add(gs,g.live,parent="Singlets") # add gate to GatingSet
recompute(gs) # recompute GatingSet
g.gfp <- rectangleGate(filterId="GFP positive","GFP"=c(1000, Inf)) # set gate
add(gs,g.gfp,parent="Live") # add gate to GatingSet
recompute(gs) # recalculate Gatingset
getPopStats(gs)
getPopStats(x = gs)
?getPopStats
getPopStats(gs)
gs_pop_get_count_fast(gs)
gs_pop_get_count_fast(gs)
gs_pop_get_count_fast(gs) %>% head
gs_pop_get_count_fast(gs)
gs_pop_get_count_with_meta(gs)
gs_pop_get_count_fast(gs) %>% head
ps <- data.frame(getPopStats(gs)) # make data.frame with PopStats
ps <- data.frame(gs_pop_get_count_fast(gs)) # make data.frame with PopStats
ps
gs_pop_get_count_fast(gs)
gs_pop_get_count_fast(gs) %>% head()
ps$percent_of_parent <- ps$Count/ps$ParentCount
ps
ps %>% head
ps %>% mutate(percent_of_parent=Count/ParentCount) %>% head
merge(ps,pData(fs),by="name")
merge(ps,pData(fs),by="name") %>% head
full_join(ps,pData(fs)) %>% head
full_join(ps,pData(fs))
full_join(ps,pData(fs)) %>% tibble()
merge(ps,pData(fs),by="name") %>% tibble()
ps
ps %>% tibble
pData(fs) %>% tibble
left_join(ps,pData(fs)) %>% tibble()
ps %>% tibble
pData(fs) %>% tibble
ps %>% head()
ps <- left_join(ps,pData(fs))
ps %>% head()
pData(fs)
pData(fs) %>% head(3)
pData(fs) %>% kable(3)
library(knitr)
pData(fs) %>% kable(3)
pData(fs) %>% kable()
paged_table
?paged_table
pData(fs) %>% paged_table()
library(rmarkdown)
pData(fs) %>% paged_table()
colnames(fs)
colnames(fs) %>% kable()
colnames(fs) %>% kable(col.names = F)
colnames(fs) %>% kable(col.names = "")
colnames(fs) %>% kables()
colnames(fs) %>% matrix()
colnames(fs) %>% matrix(nrow = 3)
colnames(fs) %>% matrix(nrow = 3) %>% kable()
colnames(fs) %>% %>% matrix(nrow = 3) %>% kable()
colnames(fs) %>% %>% matrix(nrow = 3) %>% kable(col.names = NULL)
colnames(fs) %>% matrix(nrow = 3) %>% kable(col.names = NULL)
colnames(fs) %>% matrix(nrow = 3) %>% kable()
colnames(fs) %>% kable(col.names = NULL)
colnames(fs) %>% kable()
colnames(fs) %>% kable() %>% cat()
colnames(fs) %>% kable() %>% cat(3)
colnames(fs) %>% kable() %>% cat(3:5)
colnames(fs) %>% matrix(nrow = 4)
install.packages("kableExtra")
library(kableExtra)
colnames(fs) %>% matrix(nrow = 4) %>% kable_styling(font_size = 3)
colnames(fs) %>% kable() %>% kable_styling(font_size = 3)
colnames(fs)
colnames(fs)[1]
colnames(fs)[[1]]
colnames(fs) %>% print()
colnames(fs) %>% cat()
pData(fs)
pData(fs) %>% cat()
pData(fs) %>% head()
knitr::opts_knit$set(base.dir = "/Users/jch/web/jchellmuth.github.io/", base.url = "/")
knitr::opts_chunk$set(fig.path = "images/",warning=FALSE)
pData(fs) %>% head(3) %>% kable(col.names = c("rowname"))
pData(fs) %>% head(3) %>% kable(col.names = c("rowname",NA,NA))
pData(fs) %>% head(3)
pData(fs) %>% head(3) %>% kable(col.names = c("rowname",NA,NA))
pData(fs) %>% head(3) %>% kable(col.names = c("rowname","name","well"))
pData(fs) %>% head(3) %>% kable(col.names = F)
pData(fs) %>% head(3)
pData(fs) %>% head(3) %>% kable(row.names  F)
pData(fs) %>% head(3) %>% kable(row.names = F)
pData(fs) %>% head(3) %>% kable(row.names = F)
pData(fs) %>% head(3) %>% kable(row.names = F)
pData(fs)[,1:3]
pData(fs)[1:3,]
ps
ps %>% head()
?gs_pop_get_stats
gs_pop_get_count_fast(gs) %>% head
gs_pop_get_data(gs) %>% head
gs_pop_get_stats(gs) %>% head
?gs_pop_get_count_fast
gs_pop_get_count_with_meta(gs) %>% head
test <- gs_pop_get_count_with_meta(gs)
ps
class)ps
class(ps)
ps <- gs_pop_get_count_with_meta(gs)
ps %>% head() %>% kable
ps <-  %>% mutate(percent_of_parent=Count/ParentCount)
ps <- ps %>% mutate(percent_of_parent=Count/ParentCount)
ps %>% head() %>% kable
ps <- gs_pop_get_count_with_meta(gs)
ps <- ps %>% mutate(percent_of_parent=Count/ParentCount)
ps %>% select(sampleName,well,Population,Count,ParentCount,percent_of_parent) %>% head() %>% kable
knitr::opts_knit$set(base.dir = "/Users/jch/web/jchellmuth.github.io/", base.url = "/")
knitr::opts_chunk$set(fig.path = "images/",warning=FALSE)
library(flowCore)
library(ggcyto)
library(tidyverse)
library(knitr)
fs <- read.flowSet(path = "../../downloads/2020-07-08-FACS-data//",pattern = ".fcs",alter.names = T)
colnames(fs)
colnames(fs)[colnames(fs)=="FITC.A"] <- "GFP"
colnames(fs)[colnames(fs)=="Pacific.Blue.A"] <- "BFP"
gs <- GatingSet(fs)
add(gs,g.singlets) # add gate to GatingSet
g.singlets <- polygonGate(filterId = "Singlets","FSC.A"=c(2e4,25e4,25e4,2e4),"FSC.H"=c(0e4,12e4,18e4,6e4)) # define gate
add(gs,g.singlets) # add gate to GatingSet
recompute(gs) # recompute GatingSet
g.live <- polygonGate(filterId = "Live","FSC.A"=c(5e4,24e4,24e4,8e4),"SSC.A"=c(0,2e4,15e4,5e4)) # define gate
add(gs,g.live,parent="Singlets") # add gate to GatingSet
recompute(gs) # recompute GatingSet
g.gfp <- rectangleGate(filterId="GFP positive","GFP"=c(1000, Inf)) # set gate
add(gs,g.gfp,parent="Live") # add gate to GatingSet
recompute(gs) # recalculate Gatingset
ps <- gs_pop_get_count_with_meta(gs)
ps <- ps %>% mutate(percent_of_parent=Count/ParentCount)
ps %>% select(sampleName,well,Population,Count,ParentCount,percent_of_parent) %>% head() %>% kable
ggcyto(gs[1:9],aes(x=FSC.A,y=SSC.A),subset="Singlets")+geom_hex(bins = 100)+geom_gate("Live")+
geom_stats(adjust = 0.8)+ggcyto_par_set(limits = "instrument")+
facet_wrap(~well,ncol = 3)
pData(fs)$well <- gsub(".*_.*_(.*)_.*.fcs","\\1",sampleNames(fs)) # extract well from name and add new 'well' column
gs <- GatingSet(fs)
add(gs,g.singlets) # add gate to GatingSet
recompute(gs) # recompute GatingSet
add(gs,g.live,parent="Singlets") # add gate to GatingSet
recompute(gs) # recompute GatingSet
add(gs,g.gfp,parent="Live") # add gate to GatingSet
recompute(gs) # recalculate Gatingset
ps <- gs_pop_get_count_with_meta(gs)
ps <- ps %>% mutate(percent_of_parent=Count/ParentCount)
ps %>% select(sampleName,well,Population,Count,ParentCount,percent_of_parent) %>% head() %>% kable
ggcyto(gs[1:9],aes(x=FSC.A,y=SSC.A),subset="Singlets")+geom_hex(bins = 100)+geom_gate("Live")+
geom_stats(adjust = 0.8)+ggcyto_par_set(limits = "instrument")+
facet_wrap(~well,ncol = 3)
